// Generated by Dagger (https://dagger.dev).
package com.dionep.ribscage.ui.root;

import com.dionep.ribscage.data.ApiClient;
import com.dionep.ribscage.data.Prefs;
import com.uber.rib.core.Interactor_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRootBuilder_Component implements RootBuilder.Component {
  private final RootBuilder.ParentComponent parentComponent;

  private Provider<RootView> viewProvider;

  private Provider<RootInteractor.RootPresenter> presenter$app_debugProvider;

  private Provider<RootBuilder.Component> componentProvider;

  private Provider<RootInteractor> interactorProvider;

  private Provider<RootRouter> router$app_debugProvider;

  private DaggerRootBuilder_Component(RootBuilder.ParentComponent parentComponentParam,
      RootInteractor interactorParam, RootView viewParam) {
    this.parentComponent = parentComponentParam;
    initialize(parentComponentParam, interactorParam, viewParam);
  }

  public static RootBuilder.Component.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RootBuilder.ParentComponent parentComponentParam,
      final RootInteractor interactorParam, final RootView viewParam) {
    this.viewProvider = InstanceFactory.create(viewParam);
    this.presenter$app_debugProvider = DoubleCheck.provider((Provider) viewProvider);
    this.componentProvider = InstanceFactory.create((RootBuilder.Component) this);
    this.interactorProvider = InstanceFactory.create(interactorParam);
    this.router$app_debugProvider = DoubleCheck.provider(RootBuilder_Module_Router$app_debugFactory.create(componentProvider, viewProvider, interactorProvider));
  }

  @Override
  public void inject(RootInteractor arg0) {
    injectRootInteractor(arg0);
  }

  @Override
  public ApiClient apiClient() {
    return Preconditions.checkNotNullFromComponent(parentComponent.apiClient());
  }

  @Override
  public Prefs prefs() {
    return Preconditions.checkNotNullFromComponent(parentComponent.prefs());
  }

  @Override
  public RootRouter rootRouter() {
    return router$app_debugProvider.get();
  }

  private RootInteractor injectRootInteractor(RootInteractor instance) {
    Interactor_MembersInjector.injectPresenter(instance, presenter$app_debugProvider.get());
    RootInteractor_MembersInjector.injectPresenter(instance, presenter$app_debugProvider.get());
    return instance;
  }

  private static final class Builder implements RootBuilder.Component.Builder {
    private RootInteractor interactor;

    private RootView view;

    private RootBuilder.ParentComponent parentComponent;

    @Override
    public Builder interactor(RootInteractor interactor) {
      this.interactor = Preconditions.checkNotNull(interactor);
      return this;
    }

    @Override
    public Builder view(RootView view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public Builder parentComponent(RootBuilder.ParentComponent component) {
      this.parentComponent = Preconditions.checkNotNull(component);
      return this;
    }

    @Override
    public RootBuilder.Component build() {
      Preconditions.checkBuilderRequirement(interactor, RootInteractor.class);
      Preconditions.checkBuilderRequirement(view, RootView.class);
      Preconditions.checkBuilderRequirement(parentComponent, RootBuilder.ParentComponent.class);
      return new DaggerRootBuilder_Component(parentComponent, interactor, view);
    }
  }
}
