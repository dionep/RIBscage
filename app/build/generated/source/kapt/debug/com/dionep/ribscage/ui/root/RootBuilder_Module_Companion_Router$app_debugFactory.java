// Generated by Dagger (https://dagger.dev).
package com.dionep.ribscage.ui.root;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RootBuilder_Module_Companion_Router$app_debugFactory implements Factory<RootRouter> {
  private final Provider<RootBuilder.Component> componentProvider;

  private final Provider<RootView> viewProvider;

  private final Provider<RootInteractor> interactorProvider;

  public RootBuilder_Module_Companion_Router$app_debugFactory(
      Provider<RootBuilder.Component> componentProvider, Provider<RootView> viewProvider,
      Provider<RootInteractor> interactorProvider) {
    this.componentProvider = componentProvider;
    this.viewProvider = viewProvider;
    this.interactorProvider = interactorProvider;
  }

  @Override
  public RootRouter get() {
    return router$app_debug(componentProvider.get(), viewProvider.get(), interactorProvider.get());
  }

  public static RootBuilder_Module_Companion_Router$app_debugFactory create(
      Provider<RootBuilder.Component> componentProvider, Provider<RootView> viewProvider,
      Provider<RootInteractor> interactorProvider) {
    return new RootBuilder_Module_Companion_Router$app_debugFactory(componentProvider, viewProvider, interactorProvider);
  }

  public static RootRouter router$app_debug(RootBuilder.Component component, RootView view,
      RootInteractor interactor) {
    return Preconditions.checkNotNullFromProvides(RootBuilder.Module.Companion.router$app_debug(component, view, interactor));
  }
}
